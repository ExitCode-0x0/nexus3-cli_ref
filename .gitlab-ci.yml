---
include:
  - template: Code-Quality.gitlab-ci.yml
  - template: SAST.gitlab-ci.yml
  - template: Secret-Detection.gitlab-ci.yml
#
variables:
  SAST_BANDIT_EXCLUDED_PATHS: '*/tests/*'
#
stages:
  - build
  - test
  - quality
  - publish
  - trigger
# --------------------------------------------------------------------------
# `build` stage
# --------------------------------------------------------------------------
.unit_template: &unit_template
  before_script:
    - pip install setuptools
    - pip install -e .[test]
  variables:
    PYTHON_VERSION: '3.12'
  image: python:${PYTHON_VERSION}
  stage: test
  script:
    - pytest -m 'not integration'
      --junitxml=junit-${PYTHON_VERSION}.xml
      --cov-report xml:coverage-${PYTHON_VERSION}.xml
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  artifacts:
    reports:
      junit: junit*.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage*.xml
      cyclonedx: "**/gl-sbom-*.cdx.json"
  dependencies: []
#
flake8:
  <<: *unit_template
  image: python:${PYTHON_VERSION}-alpine
  stage: build
  artifacts: {}
  before_script: []
  script:
    - pip install flake8
    - flake8 *.py src tests --format=pylint
#
mypy:
  <<: *unit_template
  stage: build
  artifacts: {}
  script:
    - pip install mypy
    - python -m pip install types-requests types-setuptools
    - mypy src
#
package:
  <<: *unit_template
  stage: build
  before_script: []
  script:
    - python setup.py sdist bdist_wheel
    - pip install .
    - pip freeze > requirements.txt
    - pip install pip-audit
    - apt-get update && apt-get install -y jq
    - pip-audit --progress-spinner off -r requirements.txt -f cyclonedx-json 2>/dev/null | jq -c '.metadata += {"properties":[{"name":"gitlab:dependency_scanning:package_manager","value":"pip"},{"name":"gitlab:dependency_scanning:package_manager:name","value":"pip"},{"name":"gitlab:dependency_scanning:input_file","value":"requirements.txt"},{"name":"gitlab:dependency_scanning:input_file:path","value":"requirements.txt"},{"name":"gitlab:meta:schema_version","value":"1"}]}' > gl-sbom-pip.cdx.json || exit 0
  artifacts:
    paths:
      - dist
# --------------------------------------------------------------------------
# `test` stage
# --------------------------------------------------------------------------
# unit tests
.python-matrix:
  parallel:
    matrix:
      - PYTHON_VERSION: ['3.10', '3.11', '3.12']

unit:
  extends:
    - .python-matrix
    - .unit_template

#
# integration tests
.nexus-matrix:
  parallel:
    matrix:
      - NEXUS_VERSION: ['3.68.1', '3.69.0', 'latest']

.integration_template:
  except: ['tags']
  image: docker:latest
  services:
    - docker:dind
  stage: test
  variables:
    NEXUS_CONTEXT: ''
    NEXUS_VERSION: 'latest'
  before_script: []
  script:
    - docker info
    # get nexus going since it takes a little while to start-up
    - docker run -d --rm -p 8081:8081 -v $(pwd)/tests/fixtures/nexus-data/etc:/nexus-data/etc --name nexus sonatype/nexus3:$NEXUS_VERSION
    # test dependencies
    - apk add bash curl py3-pip python3-dev gcc musl-dev linux-headers openssl-dev libffi-dev rust cargo
    - export CFLAGS=-I/usr/include
    - export VENV=$(mktemp -d)
    - python3 -m venv $VENV
    - . $VENV/bin/activate
    - pip3 install setuptools
    - pip3 install dist/nexus3_cli*.whl
    # don't use --upgrade; we want to test the package as installed above
    - pip3 install .[test]
    # wait until the nexus service is ready to receive requests
    - ./tests/wait-for-nexus.sh http://docker:8081 || exit 1
    - nexus3 login -U "http://docker:8081/${NEXUS_CONTEXT}" --no-x509_verify -u admin -p $(docker exec nexus cat /nexus-data/admin.password)
    - pytest -m integration
      --junitxml=junit-integration-${NEXUS_VERSION}.xml
      --cov-report xml:coverage-integration-${NEXUS_VERSION}.xml
  dependencies:
    - package

integration:
  extends:
    - .nexus-matrix
    - .unit_template
    - .integration_template

integration nexus-context:
  extends:
    - .unit_template
    - .integration_template
  variables:
    NEXUS_CONTEXT: ''
  before_script:
    - echo "nexus-context-path=/${NEXUS_CONTEXT}" >> $(pwd)/tests/fixtures/nexus-data/etc/nexus.properties

# --------------------------------------------------------------------------
# `quality` stage
# --------------------------------------------------------------------------
spotbugs-sast:
  rules:
    - when: never
# --------------------------------------------------------------------------
# `publish` stage
# --------------------------------------------------------------------------
pypi:
  stage: publish
  image: python:3
  script:
    - pip install -U twine
    - twine upload dist/*
  only: ['tags']
#
docker:
  stage: trigger
  trigger:
    project: thiagocsf/docker-nexus3-cli
    branch: master
  only: ['master', 'tags']
